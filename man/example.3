.TH LIBDYNAMIC 3 "AUGUST 2014" "libdynamic-0.1.0" "libdynamic - Dynamic C containers"
.SH NAME

vector \- dynamically sized vector modelled roughly after std::vector

.SH SYNOPSIS

#include <dynamic.h>

.B ALLOCATORS

vector *vector_new(size_t object_size);
.br
void    vector_free(vector *vector);
.br
void    vector_init(vector *vector, size_t object_size);
.br
void    vector_release(vector *vector, void (*release)(void *));
.br
void   *vector_deconstruct(vector *);

.B CAPACITY

size_t  vector_size(vector *vector);
.br
size_t  vector_capacity(vector *vector);
.br
int     vector_empty(vector *);
.br
int     vector_reserve(vector *vector, size_t reserved_size);
.br
int     vector_shrink_to_fit(vector *vector);

.B ELEMENT ACCESS

void   *vector_at(vector *vector, size_t position);
.br
void   *vector_front(vector *vector);
.br
void   *vector_back(vector *vector);
.br
void   *vector_data(vector *vector);

.B MODIFIERS

int     vector_push_back(vector *vector, void *object);
.br
void    vector_pop_back(vector *vector);
.br
int     vector_insert(vector *vector, size_t position, size_t number_of_objects, void *objects);
.br
void    vector_erase(vector *vector, size_t from_position, size_t to_position);
.br
void    vector_clear(vector *vector);

.SH DESCRIPTION

The vector data structure implements a dynamically sized vector of objects, modelled roughly after std::vector.

.SH AUTHOR

Fredrik Widlund <fredrik dot widlund at gmail dot com>

